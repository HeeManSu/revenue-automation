"""
Audit Memo Generator

This module produces a formal, audit-compliant memorandum to document the revenue recognition assessment performed under ASC 606: Revenue from Contracts with Customers.

Each memo summarizes the accounting treatment, allocation, and recognition logic for a given customer contract, ensuring transparency, traceability and compliance. 
"""


from datetime import datetime
from typing import Any, Dict, Optional


class AuditMemoGenerator:
    """Generates detailed ASC 606-compliant audit memoranda."""
    
    def __init__(self):
        self.analysis_date = datetime.now().strftime("%Y-%m-%d")
        
    def _safe_key(self, data: Dict, key: str, default: Any = "N/A"):
        return data.get(key, default)
    
    def _format_currency(self, value: Optional[float]) -> str:
        
        if value is None:
            return "-"

        try:
            return f"${float(value):,.2f}"
        except (TypeError, ValueError):
            return "-"
        
        
    def get_audit_memo(self, contract_data: Dict[str, Any], revenue_result: Dict[str,Any]) -> str:
        """
        Generate an audit memorandum for the given contract and its revenue recognition output.
        
        Args:
            contract_data: Extracted contract metadata and obligations
            revenue_result: Revenue recognition output generated by ASC 606 engine
            
        Returns:
            A formatted markdown memorandum    
        """
        
        
        contract_id = self._safe_key(contract_data, "contract_id")
        provider = self._safe_key(contract_data, "provider")
        customer = self._safe_key(contract_data, "customer")
        total_value = self._safe_key(contract_data, "total_contract_value", 0)
        effective_date = self._safe_key(contract_data, "effective_date")
        end_date  = self._safe_key(contract_data, "end_date")
        currency = self._safe_key(contract_data, "currency")
        
        
        memo = f"""
            # Audit MEMORANDUM - REVENUE RECOGNITION ANALYSIS
            **Standard:** ASC 606 - Revenue from Contracts with Customers
            **Contract ID:** {contract_id}
            **Date of Analysis:** {self.analysis_date}
            **Prepared By:** Automated Revenue Recognition System
              
            ---
            
            ## 1. Purpose of Memorandum
            This memorandum documents the revenue recognition assessment for **Contract {contract_id}**
            between **{provider}** ("the Provider") and **{customer}** ("the Customer").
            The assessment applies the five-step model prescribed under **ASC 606**, detailing the identification of performance obligations, determination and allocation of the transaction price, and the timing of revenue recognition.
            
            ---
            
            ## 2. Contract Summary
            
            | Field | Detail |
            |-------|--------|
            | Provider | {provider} |
            | Customer | {customer} |
            | Contract ID | {contract_id} |
            | Effective Date | {effective_date} |
            | End Date | {end_date} |
            | Total Consideration | {self._format_currency(total_value)} |
            | Currency | {currency} |
            
            The contract provides the Customer with access to the Provider's financial automation platform
            along with implementation, support, training, and optional analytics modules.
            
            ---
            
            ## 3. ASC 606 Five-Step Framework
            
            ### Step 1: Identify the Contract
            The agreement meets the criteria outlined in ASC 606-10-25-1 for contract existence:
             - Approval and commitment by both parties
             - Clearly identifiable right and payment terms
             - Probable collection of consideration
             
            ### Step 3: Identify Performance Obligations
            Distinct performance obligations were identified based on the contractual deliverables.
            
            | No. | Performance Obligation | Nature | Recognition Method | Distinct? |
            |-----|------------------------|---------|--------------------|------------|
            
            """
        for i, obligation in enumerate(contract_data.get("performance_obligations", []), 1):
            method = obligation.get("revenue_recognition_method", "").replace("_", " ").title()
            memo += f"| {i} | {obligation.get('name', 'N/A')} | {obligation.get('type', 'N/A')} | {method} | Yes |\n"
        memo += f"""
              
            ### Step 3: Determine the Transaction Price
            The total transaction price of **{self._format_currency(total_value)}** was determined based on contractual consideration, adjusted for variable components and discounts where applicable.
            
            **Variable Consideration:**
            """
        for variable in contract_data.get("variable_considerations", []):
            memo += f"- {variable.get('name')}: {variable.get('description')}\n"
            
        if not contract_data.get("variable_considerations"):
            memo += "- None identified\n"
            
        memo += "\n**Discounts and Incentives:**\n"
        for discount in contract_data.get("discounts", []):
            memo += f"- {discount.get('name')}: {discount.get('description')}\n"
        if not contract_data.get("discounts"):
            memo += "- None identified\n"
            
        memo += f"""
           ### Step 4: Allocate the Transaction Price
           In accordance with ASC 606-10-32-28, the transaction price was allocated to performance obligations based on their relative standalone selling prices (SSP).
           
           | Obligation | SSP | Allocated Amount | % of Total |
           |-------------|-----|------------------|-------------|
           
        """
        
        total_allocated = sum(
            float(obligation.get("allocated_value", obligation.get("ssp", 0)))
            for obligation in contract_data.get("performance_obligations", [])
        )
        
        for obligation in contract_data.get("performance_obligations", []):
            ssp = float(obligation.get("ssp", 0))
            allocated = float(obligation.get("allocated_value", ssp))
            pct = (allocated / total_value * 100) if total_value else 0
            memo += f"| {obligation.get('name', 'N/A')[:50]} | {self._format_currency(ssp)} | {self._format_currency(allocated)} | {pct:.1f}% |\n"
            
        memo += f"""
            ### Step 5: Recognize Revenue
            Revenue is recognized as control of the goods or services transfers to the Customer, in accordance with the recognition method prescribed for each performance obligation.
        
            | Obligation | Method | Recognition Timing | Trigger |
            |-------------|---------|-------------------|----------|
        
        """
        for obligation in contract_data.get("performance_obligations", []):
            method = obligation.get("revenue_recognition_method", "").replace("_", " ").title()
            trigger = obligation.get("recognition_trigger", "N/A")
            memo += f"| {obligation.get('name', 'N/A')[:50]} | {method} | As specified | {trigger} |\n"
               
        # Revenue Schedule Summary
        schedule = revenue_result.get("revenue_schedule", [])
        grouped = {}
        for row in schedule:
            key = f"{row.get('period_start')} â†’ {row.get('period_end')}"
            grouped.setdefault(key, []).append(row)
                
        memo += f"""
        ---
            
            ## 4. Revenue Recognition Schedule Summary
            The system generated {len(schedule)} revenue recognition entries across the contract period.
            
            | Period | Obligation(s) | Amount | Method | Status |
            |--------|----------------|--------|--------|--------|
        
        """
        for period, entries in list(grouped.items())[:10]:
            total_amt = sum(entry.get("amount", 0) for entry in entries)
            methods = ", ".join(sorted({entry.get("recognition_method", "-") for entry in entries}))
            statuses = ", ".join(sorted({entry.get("status", "-") for entry in entries}))
            memo += f"| {period} | Multiple | {self._format_currency(total_amt)} | {methods} | {statuses} |\n"
            
        if len(grouped) > 10:
            memo += f"| ... | ... | ... | ... | ... |\n| **Total Periods:** {len(grouped)} | | | | |\n"
            
        memo += f"""
        ---
        
            ## 5. Accounting Assessment
            **Compliance with ASC 606 Principles**
            - Contract identification confirmed (ASC 606-10-25-1)
            - Distinct performance obligations identified (ASC 606-10-25-19)
            - Transaction price properly allocated (ASC 606-10-32-28)
            - Revenue recognized upon satisfaction of performance obligations (ASC 606-10-25-30)
            - Variable consideration constrained until probable and estimable (ASC 606-10-32-11)
        
            **Judgments Applied**
            - Implementation and training revenue recognized at point in time upon customer acceptance.
            - SaaS and PCS revenue recognized over time on a straight-line basis.
            - Variable consideration (usage-based add-ons) deferred until measurable.
        
            ---
        
            ## 6. Risk Assessment and Controls
            | Risk Area | Assessment | Mitigation |
            |-----------|------------|------------|
            | Contract Identification | High | Documented in contract and system metadata |
            | Performance Obligation Identification | High | System-driven identification with manual review |
            | Transaction Price Allocation | High | SSP-based allocation with manual review |
            | Revenue Recognition Timing | High | Method-specific triggers with manual review |
        
            ---
        
            ## 7. Conclusion
            Based on the analysis above, the revenue recognition treatment for Contract **{contract_id}**
            is appropriate under **ASC 66**.  
            The allocation, timing, and recognition of revenue are consistent with accounting policy and
            the nature of the contractual deliverables.
        
            **Total Revenue Recognized:** {self._format_currency(total_value)}  
            **Recognition Period:** {effective_date} â†’ {end_date}  
            **Memo Prepared On:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}  
        
            ---
        
            **Prepared by:** Automated Revenue Recognition System  
            **Reviewed by:** Revenue Accounting Manager (to be assigned)  
            **Version:** ASC 606 Engine v1.0
        
        """
        return memo.strip()


def generate_audit_memo(contract_data: Dict[str, Any], revenue_result: Dict[str, Any]) -> str:
    """Convenience wrapper for generating the audit memo."""
    return AuditMemoGenerator().get_audit_memo(contract_data, revenue_result)
